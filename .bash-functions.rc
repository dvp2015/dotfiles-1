#!/bin/bash

if [[ -n "$ZSH_VERSION" ]] ; then
    setopt shwordsplit
fi

join_strings() {
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
cat << 'END'
Usage:

   join_strings [options...] item1 item2 ...

Options:
    -h, --help              - print this help text
    -u, --unique            - drop non unique items
    -s, --separator <CHAR>  - use <CHAR> as item separator, default ':'

Forms list of items with given separator from the given arguments optionally removing duplicates.
Handles items with spaces.

Example:
v=$(join_strings -s "," -u 1 2 3,4,1 3 "a b" c)
echo $v

Output:
1,2,3,4,a b,c
END
        return 0
    fi
    local separator=":"
    local unique=""
    while true; do
        local arg="$1"
        if [[ "-s" == "$arg" ]] || [[ "--separator" == "$arg" ]]; then
            shift
            separator="$1"
            shift
        elif [[ "-u" == "$arg" ]] || [[ "--unique" == "$arg" ]]; then
            shift
            unique="yes"
        else
            break
        fi
    done
    res=""
    # echo "Unique: $unique, separator: \"$separator\""
    for arg in $@; do
        IFS=$separator array=(${arg})
        for inner_arg in ${array[@]}; do 
            # Note: the right hand side of operator =~ is to be unquoted
            if [[ -z "$unique" ]] || [[ ! "$res" =~ (^|$separator)$inner_arg($separtor|$) ]]; then
                if [[ -n "$res" ]]; then
                    res="${res}${separator}"
                fi
                res="${res}${inner_arg}"
            fi
        done
    done
    echo "${res}"
}

make_path() {
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
cat << 'END'
    Usage:

        make_path path1 path2 ...
    
        Forms PATH like text output from the given arguments removing duplicates.
        Handles items with spaces.
    
    Example:
        v=$(make_path 1 2 3:4:1 3 "a b")
        echo $v

    Output:
        1:2:3:4:a b
END
        return 0
    fi
    join_strings -u $@
}


download() {
    curl -O $1
}


is_sourced() {
    [[ ${FUNCNAME[@]: -1} == "source" ]]
}


update_path() {
    local new_path=$(make_path $@)
    if [[ "$new_path" != "$PATH" ]]; then
        export PATH="$new_path"
    fi
}


all_dirs_exist() {
    local _path=${1:-$PATH}
    local warns=0
    local array
    IFS=':' array=(${_path})
    for pp in "${array[@]}"; do
        if  [[ ! -d "$pp"  ]]; then
            echo "WARNING: Directory \"$pp\" doesn't exist!"
            warns=$(($warns + 1))
        fi
    done
    return $warns
}


all_files_exist() {
    local warns=0
    for f in $@; do
        if [[ ! -e "$f" ]]; then
            echo "WARNING: File \"$f\" doesn't exist"
            warns=$(($warns + 1))
        fi
    done
    return $warns
}

add_to_path() {
    export PATH="$(make_path $PATH $@)"
}

prepend_path() {
    export PATH="$(make_path $@ $PATH)"
}


bz() {
    #
    #  Compress/decompress file with bzip2 if a file has/doesn't have extension
    #  bz2
    #
    local file_name=$1
    if [[ -r $file_name ]]; then
        if [[ "${file_name/.bz2}" == "$file_name" ]]; then
            bzip2 -z "$file_name"
        else
            bzip2 -d "$file_name"
        fi
    else
        echo "ERROR bz: cannot read file $file_name"
    fi
}


mydir () {
    get_dir "${BASH_SOURCE[0]}"
}

get_dir() {
    curdir="$(pwd)"
    local src="$1"
    while [ -h "$src" ]; do # resolve $src until the file is no longer a symlink
        DIR="$( cd -P "$( dirname "$src" )" >/dev/null 2>&1 && pwd )"
        src="$(readlink "$src")"
        # if $src was a relative symlink, we need to resolve it relative
        # to the path where the symlink file was located
        [[ $src != /* ]] && src="$DIR/$src" 
    done
    cd -P "$( dirname "$src" )" >/dev/null 2>&1 && pwd
    cd "$curdir" > /dev/null 2>&1
}

# v - open files in ~/.viminfo and ~/.nviminfo
v() {
    local files
    files=$(grep --no-filename '^>' ~/.viminfo | cut -c3- |
        while read line; do
            [ -f "${line/\~/$HOME}" ] && echo "$line"
        done | fzf -d -m -q "$*" -1) && vim ${files//\~/$HOME}
}

# Searches the first readable file over folder hierarchy, starting from the current directory
# Arguments:
#    $1 - file to seaarch
#    $2 - path to start search from (optional, default current dir)
# Output on success: the full path to the found file
# Returns 0 on success, 1 if the file not found
# Exits if the file is not specified in arguments.
search_file_upward() {
    if [[ $# < 1 ]]; then
        echo "ERROR: search_file_upward: the file name is not provided"
        return 10
    fi
    local d=${2:-$(pwd)}
    while [[ "$d" != "/" ]]
    do
        fn=$(readlink -f $d/$1)
        if [[ -r $fn  ]]; then
            echo $fn
            return 0
        fi
        d=$(dirname $d)
    done
    return 1 # file is not found in the folders hierarchy
}


# add ssh id to a console session
sshid() {
    eval $(ssh-agent) && ssh-add
}

check_go() {
    if [[ ! -x $(command -v go) ]]; then
        echo "Setup a go environment with 'install/go' script"
        echo "Or see https://golang.org/doc/install"
        return 1
    fi
    local min_required_version="${1:-1.17}"
    local go_version=$(go version | cut -c "14-17")
    if [[ $go_version < "$min_required_version" ]]; then
        echo "go version  >= $min_required_version is required, actual version $go_version"
        return 2
    fi
    return 0
}

# vim: set ts=4 sw=0 tw=88 ss=0 ft=sh et ai :
