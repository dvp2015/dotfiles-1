#!/usr/bin/env bash

if [[ -n "$ZSH_VERSION" ]] ; then
    setopt shwordsplit
fi

join_strings() {
    local separator=":"
    local unique=""
    local arg="$1"
    if [[ "-s" == "$arg" ]] || [[ "--separator" == "$arg" ]]; then
        shift
        separator="$1"
        shift
    elif [[ "-u" == "$arg" ]] || [[ "--unique" == "$arg" ]]; then
        shift
        unique="yes"
    fi
    res=""
    for arg in $@; do
        IFS=$separator array=(${arg})
        for inner_arg in ${array[@]}; do 
            if [[ -z "$unique" ]] || [[ ! "$res" =~ "(^|$separator)$inner_arg($separtor|$)" ]]; then
                if [[ -n "$res" ]]; then
                    res="${res}${separator}"
                fi
                res="${res}${inner_arg}"
            fi
        done
    done
    echo "${res}"
}

function make_path() {
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
cat << 'END'
    Usage:

        make_path path1 path2 ...
    
        Forms PATH like text output from the given arguments removing duplicates.
        Handles items with spaces.
    
    Example:
        v=$(make_path 1 2 3:4:1 3 "a b")
        echo $v

    Output:
        1:2:3:4:a b
END
        return 0
    fi
    join_strings -u $@
}


download() {
    curl -O $1
}


is_sourced() {
    [[ ${FUNCNAME[@]: -1} == "source" ]]
}


update_path() {
    local new_path=$(make_path $@)
    if [[ "$new_path" != "$PATH" ]]; then
        export PATH="$new_path"
    fi
}


all_dirs_exist() {
    local _path=${1:-$PATH}
    local warns=0
    local array
    IFS=':' array=(${_path})
    for pp in "${array[@]}"; do
        if  [[ ! -d "$pp"  ]]; then
            echo "WARNING: Directory \"$pp\" doesn't exist!"
            warns=$(($warns + 1))
        fi
    done
    return $warns
}


all_files_exist() {
    local warns=0
    for f in $@; do
        if [[ ! -e "$f" ]]; then
            echo "File $f doesn't exist"
            warns=$(($warns + 1))
        fi
    done
    return $warns
}

function add_to_path() {
    export PATH="$(makepath $PATH $@)"
}


function bz() {
    #
    #  Compress/decompress file with bzip2 if a file has/doesn't have extension
    #  bz2
    #
    local file_name=$1
    if [[ -r $file_name ]]; then
        if [[ "${file_name/.bz2}" == "$file_name" ]]; then
            bzip2 -z "$file_name"
        else
            bzip2 -d "$file_name"
        fi
    else
        echo "ERROR bz: cannot read file $file_name"
    fi
}


mydir () {
    local src="${BASH_SOURCE[0]}"
    while [ -h "$src" ]; do # resolve $src until the file is no longer a symlink
        DIR="$( cd -P "$( dirname "$src" )" >/dev/null 2>&1 && pwd )"
        src="$(readlink "$src")"
        # if $src was a relative symlink, we need to resolve it relative
        # to the path where the symlink file was located
        [[ $src != /* ]] && src="$DIR/$src" 
    done
    cd -P "$( dirname "$src" )" >/dev/null 2>&1 && pwd
}


# vim: set ts=4 sw=0 tw=88 ss=0 ft=sh et ai :
