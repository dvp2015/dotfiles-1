[[ -z "$ORIGINAL_PATH" ]] && export ORIGINAL_PATH="$PATH"

#
# Editors
#
export EDITOR=vim
export GIT_EDITOR="$EDITOR"
export USE_EDITOR="$EDITOR"
export VISUAL=$EDITOR
export PAGER=less

##
## Pager
##
export PAGER=less
# TODO: checkout http://superuser.com/questions/124846/mercurial-colour-output-piped-to-less/403748#403748
export LESS='-iFMRSX -x4'

##
## Make
##
export MAKEFLAGS="-j $(nproc)"

export MCNP_HOME="${MCNP_HOME:-/opt/lanl}"
export MCNP_DATA=$MCNP_HOME/MCNP_DATA
export DATAPATH=$MCNP_DATA
export MCNP_DEFAULT_XSDIR=$DATAPATH/xsdir

alias printpath='echo -e ${PATH//:/\\n}'

<<<<<<< HEAD
function join_strings() {
    separator=":"
    arg="$1"
    if [[ "--" == "$arg" ]]; then 
        shift
    elif [[ "-s" == "$arg" ]] || [[ "--separator" == "$arg" ]]; then
        shift
        separator="$1"
        shift
    fi
    res=""
    for arg in $*
    do 
        if [[ -n "$res" ]]; then
            res="${res}${separator}"
        fi
        res="${res}${arg}"
    done
    echo "${res}"
}

#
# make_path
#
#   Forms PATH like text output from the given arguments
#
# Example:
#   v=$(make_path 1 2 3:4:1 3)
#   echo $v
# Output:
#   1:2:3:4
#
function make_path() {
    local first="yes"
    local t=""
    for p in $*
    do
        array=($(echo ${p//:/ }))
        for pp in "${array[@]}"
        do
            if  [[ "$t" != "$pp" ]]          && \
                [[ "$t" == "${t#${pp}:}" ]]  && \
                [[ "$t" == "${t%:${pp}}" ]]  && \
                [[ "$t" == "${t/:${pp}:}" ]]; then
                if [[ $first == "yes" ]]; then
                    first="no"
                else
                    t="${t}:"
                fi
                t="${t}${pp}"
            fi
        done
    done
    echo "$t"
}


function remove_non_existing_dirs_from_path() {
    local first="yes"
    local t=""
    local array=($(echo ${=$1//:/ }))
    for pp in "${array[@]}"
    do
        if  [[ -d "$pp"  ]]; then
            if [[ $first == "yes" ]]; then
                first="no"
            else
                t="${t}:"
            fi
            t="${t}${pp}"
        fi
    done
    echo "$t"
}


function all_dirs_exist() {
    local path=${1:-$PATH}
    local warns=0
    local array=($(echo ${path//:/ }))
    for pp in "${array[@]}"
    do
        if  [[ ! -d "$pp"  ]]; then
            echo "WARNING: Directory \"$pp\" doesn't exist!"
            warns=$(($warns + 1))
        fi
    done
    return $warns
}


check_files_exist() {
    for f in $*; do
        if [[ -e "$f" ]]; then
            continue
        else
            echo "File $f doesn't exist"
                return 1
                fi
                done
                return 0
}


if [[ -z "$ORIGINAL_PATH" ]]; then
    export ORIGINAL_PATH="$PATH"
fi

function update_path() {
    #
    # Multiple exports of PATH screw down ZSH path somehow, this is workaround
    #

    local NEW_PATH=$(make_path $*)

    #TODO the following breaks the path
    #all_dirs_exist $NEW_PATH || NEW_PATH=$(remove_non_existing_dirs_from_path "$NEW_PATH")

    if [[ "$NEW_PATH" != "$PATH" ]]; then
        export PATH="$NEW_PATH"
    fi
}
||||||| merged common ancestors
function join_strings() {
    separator=":"
    arg="$1"
    if [[ "--" == "$arg" ]]; then 
        shift
    elif [[ "-s" == "$arg" ]] || [[ "--separator" == "$arg" ]]; then
        shift
        separator="$1"
        shift
    fi
    res=""
    for arg in $*
    do 
        if [[ -n "$res" ]]; then
            res="${res}${separator}"
        fi
        res="${res}${arg}"
    done
    echo "${res}"
}

#
# make_path
#
#   Forms PATH like text output from the given arguments
#
# Example:
#   v=$(make_path 1 2 3:4:1 3)
#   echo $v
# Output:
#   1:2:3:4
#
function make_path() {
    local first="yes"
    local t=""
    for p in $*
    do
        array=($(echo ${p//:/ }))
        for pp in "${array[@]}"
        do
            if  [[ "$t" != "$pp" ]]          && \
                [[ "$t" == "${t#${pp}:}" ]]  && \
                [[ "$t" == "${t%:${pp}}" ]]  && \
                [[ "$t" == "${t/:${pp}:}" ]]; then
                if [[ $first == "yes" ]]; then
                    first="no"
                else
                    t="${t}:"
                fi
                t="${t}${pp}"
            fi
        done
    done
    echo "$t"
}


function remove_non_existing_dirs_from_path() {
    local first="yes"
    local t=""
    local array=($(echo ${=$1//:/ }))
    for pp in "${array[@]}"
    do
        if  [[ -d "$pp"  ]]; then
            if [[ $first == "yes" ]]; then
                first="no"
            else
                t="${t}:"
            fi
            t="${t}${pp}"
        fi
    done
    echo "$t"
}


function all_dirs_exist() {
    local path=${1:-$PATH}
    local warns=0
    local array=($(echo ${path//:/ }))
    for pp in "${array[@]}"
    do
        if  [[ ! -d "$pp"  ]]; then
            echo "WARNING: Directory $pp doesn't exist!"
            warns=$(($warns + 1))
        fi
    done
    return $warns
}


check_files_exist() {
    for f in $*; do
        if [[ -e "$f" ]]; then
            continue
        else
            echo "File $f doesn't exist"
                return 1
                fi
                done
                return 0
}


if [[ -z "$ORIGINAL_PATH" ]]; then
    export ORIGINAL_PATH="$PATH"
fi

function update_path() {
    #
    # Multiple exports of PATH screw down ZSH path somehow, this is workaround
    #

    local NEW_PATH=$(make_path $*)

    #TODO the following breaks the path
    #all_dirs_exist $NEW_PATH || NEW_PATH=$(remove_non_existing_dirs_from_path "$NEW_PATH")

    if [[ "$NEW_PATH" != "$PATH" ]]; then
        export PATH="$NEW_PATH"
    fi
}
=======
. $HOME/.bash-functions.rc
>>>>>>> 950e9d676405ca1f95590e9a563cfa6362268ef5


update_path                  \
    "$HOME/bin"              \
    "$HOME/.local/bin"       \
    "$HOME/.cargo/bin"       \
    "/opt/bin"               \
    "${MCNP_HOME}/MCNP5/bin" \
    "$HOME/misc/todo"        \
    "/usr/local/bin"         \
    "/usr/bin"               \
    "/bin"                   \
    "$PATH"



#  vim: set ts=4 sw=0 tw=88 ss=0 ft=sh et ai :
