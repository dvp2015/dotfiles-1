##
## Editors
##
export EDITOR=vim
export GIT_EDITOR="$EDITOR"
export USE_EDITOR="$EDITOR"
export VISUAL=$EDITOR
export PAGER=less

##
## Pager
##
export PAGER=less
# TODO: checkout http://superuser.com/questions/124846/mercurial-colour-output-piped-to-less/403748#403748
export LESS='-iFMRSX -x4'

##
## Make
##
export MAKEFLAGS="-j $(nproc)"

export ANACONDA_HOME="/opt/anaconda3"
export POWERLINE_HOME="$ANACONDA_HOME/python3.6/site-packages/powerline"
export MCNP_HOME=${MCNP_HOME:-/opt/lanl}
export MCNP_DATA=$MCNP_HOME/MCNP_DATA
export DATAPATH=$MCNP_DATA
export MCNP_DEFAULT_XSDIR=$DATAPATH/xsdir

function join_strings() {
    separator=":"
    arg="$1"
    if [[ "--" == "$arg" ]]; then 
        shift
    elif [[ "-s" == "$arg" ]] || [[ "--separator" == "$arg" ]]; then
        shift
        separator="$1"
        shift
    fi
    res=""
    for arg in $*
    do 
        if [[ -n "$res" ]]; then
            res="${res}${separator}"
        fi
        res="${res}${arg}"
    done
    echo "${res}"
}

#
# make_path
#
#   Forms PATH like text output from the given arguments
#
# Example:
#   v=$(make_path 1 2 3:4:1 3)
#   echo $v
# Output:
#   1:2:3:4
#
function make_path() {
    local first="yes"
    local t=""
    for p in $*
    do
        array=($(echo ${p//:/ }))
        for pp in "${array[@]}"
        do
            if  [[ "$t" != "$pp" ]]          && \
                [[ "$t" == "${t#${pp}:}" ]]  && \
                [[ "$t" == "${t%:${pp}}" ]]  && \
                [[ "$t" == "${t/:${pp}:}" ]]; then
                if [[ $first == "yes" ]]; then
                    first="no"
                else
                    t="${t}:"
                fi
                t="${t}${pp}"
            fi
        done
    done
    echo "$t"
}


function remove_non_existing_dirs_from_path() {
    local first="yes"
    local t=""
    local array=($(echo ${=PATH//:/ }))
    for pp in "${array[@]}"
    do
        if  [[ -d "$pp"  ]]; then
            if [[ $first == "yes" ]]; then
                first="no"
            else
                t="${t}:"
            fi
            t="${t}${pp}"
        fi
    done
    echo "$t"
}


function all_dirs_exist() {
    local path=${1:-$PATH}
    local warns=0
    local array=($(echo ${path//:/ }))
    for pp in "${array[@]}"
    do
        if  [[ ! -d "$pp"  ]]; then
            echo "WARNING: Directory $pp doesn't exist!"
            warns=$(($warns + 1))
        fi
    done
    return $warns
}

if [[ -z "$ORIGINAL_PATH" ]]; then
    export ORIGINAL_PATH="$PATH"
fi

function update_path() {
    #
    # Multiple exports of PATH screw down ZSH path somehow, this is workaround
    #

    local NEW_PATH=$(make_path $*)

    all_dirs_exist $NEW_PATH || NEW_PATH=$(remove_non_existing_dirs_from_path)

    if [[ "$NEW_PATH" != "$PATH" ]]; then
        export PATH="$NEW_PATH"
    fi
}

update_path                  \
    "$HOME/bin"              \
    "$HOME/.local/bin"       \
    "$HOME/.cargo/bin"       \
    "/opt/bin"               \
    "$ANACONDA_HOME/bin"     \
    "${MCNP_HOME}/MCNP5/bin" \
    "$HOME/misc/todo"        \
    "/usr/local/bin"         \
    "/usr/bin"               \
    "/bin"                   \
    "$PATH"

# TRIPOLI_HOME=/opt/tripoli
# PATH=$PATH:$TRIPOLI_HOME/bin
# PATH=$PATH:/opt/pycharm-community-2018.1.4/bin

alias printpath='echo -e ${PATH//:/\\n}'

function add_to_path() {
    export PATH="$(makepath $PATH $*)"
}


function bz() {
    #
    #  Compress/decompress file with bzip2 if a file has/doesn't have extension
    #  bz2
    #
    local file_name=$1
    if [[ -r $file_name ]]; then
        if [[ "${file_name/.bz2}" == "$file_name" ]]; then
            bzip2 -z "$file_name"
        else
            bzip2 -d "$file_name"
        fi
    else
        echo "ERROR bz: cannot read file $file_name"
    fi
}
